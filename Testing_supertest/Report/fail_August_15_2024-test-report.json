{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 1,
    "pending": 0,
    "failures": 5,
    "start": "2024-08-15T16:13:47.441Z",
    "end": "2024-08-15T16:13:49.616Z",
    "duration": 2175,
    "testsRegistered": 6,
    "passPercent": 16.666666666666664,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "534d5958-ad02-4061-8ca9-0b19ca91afb1",
      "title": "",
      "fullFile": "D:\\learning\\Testing_Bootcamp\\Mock_user_Auth_Supertest\\Testing_supertest\\Specs\\test.spec.js",
      "file": "\\Specs\\test.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3077a8b3-7498-46eb-803e-bdd6b87a20b6",
          "title": "Test Suite 1 - Verify that API Routes for mock-user-auth returns correctly (Valid)",
          "fullFile": "D:\\learning\\Testing_Bootcamp\\Mock_user_Auth_Supertest\\Testing_supertest\\Specs\\test.spec.js",
          "file": "\\Specs\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the \"CREATE USER\" API returns correctly",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth returns correctly (Valid) Verify that the \"CREATE USER\" API returns correctly",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request('http://localhost:8085') // Test endpoint\n    .post('/api/v1/users') // API endpoint\n    .send({\n        \"name\": name,\n        \"email\": email,\n        \"password\": password\n      }) // request body\n    .expect(200) // expected response status code\n    .expect(function (res) {\n        expect(res.body.message).to.equal(\"User registered with success\" )\n        expect(res.body).to.have.property('token');   \n        }) // expected response body\n    .end((err, res) => {\n            addContext(this, { // Log the response body\n                title: 'Response Body',\n                value: res.body\n            })\n            if (err) {\n                addContext(this, { // Log error to report\n                    title: 'Error',\n                    value: err\n                })\n                return\n                \n            }\n            done()\n        }); // end the test case",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'body')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'body')\n    at Test.<anonymous> (Specs\\test.spec.js:32:40)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at D:\\learning\\Testing_Bootcamp\\Mock_user_Auth_Supertest\\Testing_supertest\\node_modules\\supertest\\lib\\test.js:125:7\n    at Request.callback (node_modules\\superagent\\lib\\node\\index.js:847:3)\n    at ClientRequest.<anonymous> (node_modules\\superagent\\lib\\node\\index.js:770:10)\n    at ClientRequest.emit (node:events:519:28)\n    at Socket.socketErrorListener (node:_http_client:500:9)\n    at Socket.emit (node:events:519:28)\n    at emitErrorNT (node:internal/streams/destroy:169:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:128:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "264631b9-09aa-43e9-a444-c20103ff1b21",
              "parentUUID": "3077a8b3-7498-46eb-803e-bdd6b87a20b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the \"AUTH USER\" API returns correctly",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth returns correctly (Valid) Verify that the \"AUTH USER\" API returns correctly",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request('http://localhost:8085') // Test endpoint\n    .post('/api/v1/auth') // API endpoint\n    .send({\n            \"email\": email,\n            \"password\": password\n    }) // request body\n    .expect(200) // expected response status code\n    .expect(function (res) {\n        expect(res.body).to.have.property('token');\n        }) // expected response body\n    .end((err, res) => {\n            addContext(this, { // Log the response body\n                title: 'Response Body',\n                value: res.body\n            })\n            if (err) {\n                addContext(this, { // Log error to report\n                    title: 'Error',\n                    value: err\n                })\n                return\n                \n            }\n            //set token to be used in next test cases\n            token =res.body.token\n            done()\n    }); // end the test case",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'body')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'body')\n    at Test.<anonymous> (Specs\\test.spec.js:63:40)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at D:\\learning\\Testing_Bootcamp\\Mock_user_Auth_Supertest\\Testing_supertest\\node_modules\\supertest\\lib\\test.js:125:7\n    at Request.callback (node_modules\\superagent\\lib\\node\\index.js:847:3)\n    at ClientRequest.<anonymous> (node_modules\\superagent\\lib\\node\\index.js:770:10)\n    at ClientRequest.emit (node:events:519:28)\n    at Socket.socketErrorListener (node:_http_client:500:9)\n    at Socket.emit (node:events:519:28)\n    at emitErrorNT (node:internal/streams/destroy:169:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:128:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "4ffaa63c-b30f-4c5c-b4a3-831d74a6703c",
              "parentUUID": "3077a8b3-7498-46eb-803e-bdd6b87a20b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the \"GET USER BY TOKEN\" API returns correctly",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth returns correctly (Valid) Verify that the \"GET USER BY TOKEN\" API returns correctly",
              "timedOut": true,
              "duration": 710,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"Response Body\",\n    \"value\": {\n      \"message\": \"Unauthorized\"\n    }\n  },\n  {\n    \"title\": \"Error\",\n    \"value\": {}\n  }\n]",
              "code": "request('http://localhost:8081') // Test endpoint\n    .get('/api/v1/users') // API endpoint\n    .set('Authorization', token) //set token\n    .expect(200) // expected response status code\n    .expect(function (res) {\n        expect(res.body).to.have.property('id');\n        expect(res.body).to.have.property('name');\n        expect(res.body).to.have.property('email');\n        expect(res.body).to.have.property('password');\n        expect(res.body).to.have.property('imageUrl');\n        expect(res.body.name).to.equal(name)\n        expect(res.body.email).to.equal(email)\n        expect(res.body.password).to.equal(password)\n        }) // expected response body\n    .end((err, res) => {\n            addContext(this, { // Log the response body\n                title: 'Response Body',\n                value: res.body\n            })\n            if (err) {\n                addContext(this, { // Log error to report\n                    title: 'Error',\n                    value: err\n                })\n                return\n                \n            }\n            done()\n    }); // end the test case",
              "err": {
                "message": "Error: Timeout of 700ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\learning\\Testing_Bootcamp\\Mock_user_Auth_Supertest\\Testing_supertest\\Specs\\test.spec.js)",
                "estack": "Error: Timeout of 700ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\learning\\Testing_Bootcamp\\Mock_user_Auth_Supertest\\Testing_supertest\\Specs\\test.spec.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "05828eb3-8067-4017-8dbe-c7b346113e17",
              "parentUUID": "3077a8b3-7498-46eb-803e-bdd6b87a20b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the \"PATCH USER BY TOKEN\" API returns correctly",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth returns correctly (Valid) Verify that the \"PATCH USER BY TOKEN\" API returns correctly",
              "timedOut": true,
              "duration": 712,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"Response Body\",\n    \"value\": {\n      \"message\": \"jwt malformed\"\n    }\n  },\n  {\n    \"title\": \"Error\",\n    \"value\": {}\n  }\n]",
              "code": "request('http://localhost:8081') // Test endpoint\n    .patch('/api/v1/users') // API endpoint\n    .set('Authorization', token) //set token\n    .send({\n        \"name\": name+\"patch\",\n        \"email\": email,\n        \"password\": password+\"patch\"\n      }) // request body\n    .expect(200) // expected response status code\n    .expect(function (res) {\n        expect(res.body.message).to.equal(\"User updated with success\") //Todo\n        }) // expected response body\n    .end((err, res) => {\n            addContext(this, { // Log the response body\n                title: 'Response Body',\n                value: res.body\n            })\n            if (err) {\n                addContext(this, { // Log error to report\n                    title: 'Error',\n                    value: err\n                })\n                return\n                \n            }\n            done()\n    }); // end the test case",
              "err": {
                "message": "Error: Timeout of 700ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\learning\\Testing_Bootcamp\\Mock_user_Auth_Supertest\\Testing_supertest\\Specs\\test.spec.js)",
                "estack": "Error: Timeout of 700ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\learning\\Testing_Bootcamp\\Mock_user_Auth_Supertest\\Testing_supertest\\Specs\\test.spec.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "53969293-b280-49be-bddf-bd8bc25038b9",
              "parentUUID": "3077a8b3-7498-46eb-803e-bdd6b87a20b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the \"DELETE USER BY TOKEN\" API returns correctly",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth returns correctly (Valid) Verify that the \"DELETE USER BY TOKEN\" API returns correctly",
              "timedOut": true,
              "duration": 712,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"Response Body\",\n    \"value\": {\n      \"message\": \"Unauthorized to delete\"\n    }\n  },\n  {\n    \"title\": \"Error\",\n    \"value\": {}\n  }\n]",
              "code": "request('http://localhost:8081') // Test endpoint\n    .delete('/api/v1/users') // API endpoint\n    .set('Authorization', token) //set token\n    .expect(200) // expected response status code\n    .expect(function (res) {\n       expect(res.body.message).to.equal(\"User deleted with success\") //Todo\n        }) // expected response body\n    .end((err, res) => {\n            addContext(this, { // Log the response body\n                title: 'Response Body',\n                value: res.body\n            })\n            if (err) {\n                addContext(this, { // Log error to report\n                    title: 'Error',\n                    value: err\n                })\n                return\n                \n            }\n            done()\n    }); // end the test case",
              "err": {
                "message": "Error: Timeout of 700ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\learning\\Testing_Bootcamp\\Mock_user_Auth_Supertest\\Testing_supertest\\Specs\\test.spec.js)",
                "estack": "Error: Timeout of 700ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\learning\\Testing_Bootcamp\\Mock_user_Auth_Supertest\\Testing_supertest\\Specs\\test.spec.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "fc3a1e62-037d-452d-8f31-926d929babe2",
              "parentUUID": "3077a8b3-7498-46eb-803e-bdd6b87a20b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the \"DELETE ALL USERS\" API returns correctly",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth returns correctly (Valid) Verify that the \"DELETE ALL USERS\" API returns correctly",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Response Body\",\n  \"value\": {\n    \"message\": \"Users deleted with success\"\n  }\n}",
              "code": "request('http://localhost:8081') // Test endpoint\n    .delete('/api/v1/all-users') // API endpoint\n    .send({\n            \"key_admin\": \"keyadmin123\" \n    }) \n    .expect(200) // expected response status code\n    .expect(function (res) {\n       expect(res.body.message).to.equal(\"Users deleted with success\") \n        }) // expected response body\n    .end((err, res) => {\n            addContext(this, { // Log the response body\n                title: 'Response Body',\n                value: res.body\n            })\n            if (err) {\n                addContext(this, { // Log error to report\n                    title: 'Error',\n                    value: err\n                })\n                return\n                \n            }\n            done()\n    }); // end the test case",
              "err": {},
              "uuid": "1a92be3c-0cf8-4888-a8d0-f92a17d2edd4",
              "parentUUID": "3077a8b3-7498-46eb-803e-bdd6b87a20b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1a92be3c-0cf8-4888-a8d0-f92a17d2edd4"
          ],
          "failures": [
            "264631b9-09aa-43e9-a444-c20103ff1b21",
            "4ffaa63c-b30f-4c5c-b4a3-831d74a6703c",
            "05828eb3-8067-4017-8dbe-c7b346113e17",
            "53969293-b280-49be-bddf-bd8bc25038b9",
            "fc3a1e62-037d-452d-8f31-926d929babe2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2164,
          "root": false,
          "rootEmpty": false,
          "_timeout": 700
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 700
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[status]_[datetime]-[name]-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "Report",
        "reportFilename": "[status]_[datetime]-[name]-report",
        "html": "true",
        "json": "true",
        "overwrite": "true",
        "timestamp": "longDate",
        "showFailed": "true"
      },
      "version": "6.2.0"
    }
  }
}